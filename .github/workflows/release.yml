name: release and push to central
on:
  workflow_dispatch:
    inputs:
      releaseversion:
        description: 'Release version'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Will start a Maven Central upload with version ${{ github.event.inputs.releaseversion }}"

      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Maven Central Repository
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Set projects Maven version to GitHub Action GUI set version
        run: mvn versions:set "-DnewVersion=${{ github.event.inputs.releaseversion }}"

      - name: Publish package
        run: |
          mvn --batch-mode clean deploy -DskipTests=true
          rm ./pom.xml.versionsBackup
          git config --global user.name 'Piotr Stawirej'
          git config --global user.email 'piotr.stawirej@gmail.com'
          git commit -a -m "build: update pom version"
          git push
          git push origin "v_${{ github.event.inputs.releaseversion }}"

        env:
          MAVEN_USERNAME: ${{ secrets.OSS_SONATYPE_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.OSS_SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}


      - uses: actions/checkout@v2
      - name: Commit and push after release
        run: |
          git config --global user.name 'Piotr Stawirej'
          git config --global user.email 'piotr.stawirej@gmail.com'
          git commit -am "Release"
          git push
          git tag "v_${{ github.event.inputs.releaseversion }}"
          git push origin --tags